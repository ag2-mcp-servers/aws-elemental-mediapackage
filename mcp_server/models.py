# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:39:06+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class AdMarkers(Enum):
    NONE = 'NONE'
    SCTE35_ENHANCED = 'SCTE35_ENHANCED'
    PASSTHROUGH = 'PASSTHROUGH'
    DATERANGE = 'DATERANGE'


class AdsOnDeliveryRestrictions(Enum):
    NONE = 'NONE'
    RESTRICTED = 'RESTRICTED'
    UNRESTRICTED = 'UNRESTRICTED'
    BOTH = 'BOTH'


class CmafEncryptionMethod(Enum):
    SAMPLE_AES = 'SAMPLE_AES'
    AES_CTR = 'AES_CTR'


class DeleteChannelRequest(BaseModel):
    pass


class DeleteChannelResponse(BaseModel):
    pass


class DeleteOriginEndpointRequest(BaseModel):
    pass


class DeleteOriginEndpointResponse(BaseModel):
    pass


class DescribeChannelRequest(BaseModel):
    pass


class DescribeHarvestJobRequest(BaseModel):
    pass


class DescribeOriginEndpointRequest(BaseModel):
    pass


class EncryptionMethod(Enum):
    AES_128 = 'AES_128'
    SAMPLE_AES = 'SAMPLE_AES'


class ForbiddenException(RootModel[Any]):
    root: Any


class InternalServerErrorException(RootModel[Any]):
    root: Any


class ListChannelsRequest(BaseModel):
    pass


class ListHarvestJobsRequest(BaseModel):
    pass


class ListOriginEndpointsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ManifestLayout(Enum):
    FULL = 'FULL'
    COMPACT = 'COMPACT'


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class NotFoundException(RootModel[Any]):
    root: Any


class Origination(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class PlaylistType(Enum):
    NONE = 'NONE'
    EVENT = 'EVENT'
    VOD = 'VOD'


class PresetSpeke20Audio(Enum):
    PRESET_AUDIO_1 = 'PRESET-AUDIO-1'
    PRESET_AUDIO_2 = 'PRESET-AUDIO-2'
    PRESET_AUDIO_3 = 'PRESET-AUDIO-3'
    SHARED = 'SHARED'
    UNENCRYPTED = 'UNENCRYPTED'


class PresetSpeke20Video(Enum):
    PRESET_VIDEO_1 = 'PRESET-VIDEO-1'
    PRESET_VIDEO_2 = 'PRESET-VIDEO-2'
    PRESET_VIDEO_3 = 'PRESET-VIDEO-3'
    PRESET_VIDEO_4 = 'PRESET-VIDEO-4'
    PRESET_VIDEO_5 = 'PRESET-VIDEO-5'
    PRESET_VIDEO_6 = 'PRESET-VIDEO-6'
    PRESET_VIDEO_7 = 'PRESET-VIDEO-7'
    PRESET_VIDEO_8 = 'PRESET-VIDEO-8'
    SHARED = 'SHARED'
    UNENCRYPTED = 'UNENCRYPTED'


class Profile(Enum):
    NONE = 'NONE'
    HBBTV_1_5 = 'HBBTV_1_5'
    HYBRIDCAST = 'HYBRIDCAST'
    DVB_DASH_2014 = 'DVB_DASH_2014'


class RotateChannelCredentialsRequest(BaseModel):
    pass


class RotateIngestEndpointCredentialsRequest(BaseModel):
    pass


class SegmentTemplateFormat(Enum):
    NUMBER_WITH_TIMELINE = 'NUMBER_WITH_TIMELINE'
    TIME_WITH_TIMELINE = 'TIME_WITH_TIMELINE'
    NUMBER_WITH_DURATION = 'NUMBER_WITH_DURATION'


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class Status(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class StreamOrder(Enum):
    ORIGINAL = 'ORIGINAL'
    VIDEO_BITRATE_ASCENDING = 'VIDEO_BITRATE_ASCENDING'
    VIDEO_BITRATE_DESCENDING = 'VIDEO_BITRATE_DESCENDING'


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UnprocessableEntityException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UtcTiming(Enum):
    NONE = 'NONE'
    HTTP_HEAD = 'HTTP-HEAD'
    HTTP_ISO = 'HTTP-ISO'
    HTTP_XSDATE = 'HTTP-XSDATE'


class FieldAdTriggersElement(Enum):
    SPLICE_INSERT = 'SPLICE_INSERT'
    BREAK = 'BREAK'
    PROVIDER_ADVERTISEMENT = 'PROVIDER_ADVERTISEMENT'
    DISTRIBUTOR_ADVERTISEMENT = 'DISTRIBUTOR_ADVERTISEMENT'
    PROVIDER_PLACEMENT_OPPORTUNITY = 'PROVIDER_PLACEMENT_OPPORTUNITY'
    DISTRIBUTOR_PLACEMENT_OPPORTUNITY = 'DISTRIBUTOR_PLACEMENT_OPPORTUNITY'
    PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY = 'PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY'
    DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY = (
        'DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY'
    )


class FieldPeriodTriggersElement(Enum):
    ADS = 'ADS'


class FieldBoolean(RootModel[bool]):
    root: bool


class FieldInteger(RootModel[int]):
    root: int


class FieldListOfPeriodTriggersElement(RootModel[List[FieldPeriodTriggersElement]]):
    root: List[FieldPeriodTriggersElement]


class FieldString(RootModel[str]):
    root: str


class ChannelsPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A short text description of the Channel.'
    )
    id: str = Field(
        ...,
        description='The ID of the Channel. The ID must be unique within the region and it\ncannot be changed after a Channel is created.\n',
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='A collection of tags associated with a resource'
    )


class ChannelsIdPutRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A short text description of the Channel.'
    )


class EgressAccessLogs(BaseModel):
    LogGroupName: Optional[FieldString] = None


class IngressAccessLogs(BaseModel):
    LogGroupName: Optional[FieldString] = None


class ChannelsIdConfigureLogsPutRequest(BaseModel):
    egressAccessLogs: Optional[EgressAccessLogs] = Field(
        None, description='Configure egress access logging.'
    )
    ingressAccessLogs: Optional[IngressAccessLogs] = Field(
        None, description='Configure ingress access logging.'
    )


class S3Destination1(BaseModel):
    BucketName: Optional[FieldString] = None
    ManifestKey: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None


class HarvestJobsPostRequest(BaseModel):
    endTime: str = Field(
        ..., description='The end of the time-window which will be harvested\n'
    )
    id: str = Field(
        ...,
        description='The ID of the HarvestJob. The ID must be unique within the region\nand it cannot be changed after the HarvestJob is submitted\n',
    )
    originEndpointId: str = Field(
        ...,
        description='The ID of the OriginEndpoint that the HarvestJob will harvest from.\nThis cannot be changed after the HarvestJob is submitted.\n',
    )
    s3Destination: S3Destination1 = Field(
        ...,
        description='Configuration parameters for where in an S3 bucket to place the harvested content\n',
    )
    startTime: str = Field(
        ..., description='The start of the time-window which will be harvested\n'
    )


class Authorization1(BaseModel):
    CdnIdentifierSecret: Optional[FieldString] = None
    SecretsRoleArn: Optional[FieldString] = None


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, FieldString] = Field(..., description='')


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString]


class AdTriggers(RootModel[List[FieldAdTriggersElement]]):
    root: List[FieldAdTriggersElement] = Field(
        ...,
        description='A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no\nad markers are output.  Specify multiple items to create ad markers for all of the included\nmessage types.\n',
    )


class Authorization(BaseModel):
    CdnIdentifierSecret: FieldString
    SecretsRoleArn: FieldString


class EncryptionContractConfiguration(BaseModel):
    PresetSpeke20Audio_1: PresetSpeke20Audio = Field(..., alias='PresetSpeke20Audio')
    PresetSpeke20Video_1: PresetSpeke20Video = Field(..., alias='PresetSpeke20Video')


class HlsManifest(BaseModel):
    AdMarkers_1: Optional[AdMarkers] = Field(None, alias='AdMarkers')
    AdTriggers_1: Optional[AdTriggers] = Field(None, alias='AdTriggers')
    AdsOnDeliveryRestrictions_1: Optional[AdsOnDeliveryRestrictions] = Field(
        None, alias='AdsOnDeliveryRestrictions'
    )
    Id: FieldString
    IncludeIframeOnlyStream: Optional[FieldBoolean] = None
    ManifestName: Optional[FieldString] = None
    PlaylistType_1: Optional[PlaylistType] = Field(None, alias='PlaylistType')
    PlaylistWindowSeconds: Optional[FieldInteger] = None
    ProgramDateTimeIntervalSeconds: Optional[FieldInteger] = None
    Url: Optional[FieldString] = None


class HlsManifestCreateOrUpdateParameters(BaseModel):
    AdMarkers_1: Optional[AdMarkers] = Field(None, alias='AdMarkers')
    AdTriggers_1: Optional[AdTriggers] = Field(None, alias='AdTriggers')
    AdsOnDeliveryRestrictions_1: Optional[AdsOnDeliveryRestrictions] = Field(
        None, alias='AdsOnDeliveryRestrictions'
    )
    Id: FieldString
    IncludeIframeOnlyStream: Optional[FieldBoolean] = None
    ManifestName: Optional[FieldString] = None
    PlaylistType_1: Optional[PlaylistType] = Field(None, alias='PlaylistType')
    PlaylistWindowSeconds: Optional[FieldInteger] = None
    ProgramDateTimeIntervalSeconds: Optional[FieldInteger] = None


class IngestEndpoint(BaseModel):
    Id: Optional[FieldString] = None
    Password: Optional[FieldString] = None
    Url: Optional[FieldString] = None
    Username: Optional[FieldString] = None


class S3Destination(BaseModel):
    BucketName: FieldString
    ManifestKey: FieldString
    RoleArn: FieldString


class StreamSelection(BaseModel):
    MaxVideoBitsPerSecond: Optional[FieldInteger] = None
    MinVideoBitsPerSecond: Optional[FieldInteger] = None
    StreamOrder_1: Optional[StreamOrder] = Field(None, alias='StreamOrder')


class Tags(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class UpdateChannelRequest(BaseModel):
    Description: Optional[FieldString] = None


class FieldListOfHlsManifest(RootModel[List[HlsManifest]]):
    root: List[HlsManifest]


class FieldListOfHlsManifestCreateOrUpdateParameters(
    RootModel[List[HlsManifestCreateOrUpdateParameters]]
):
    root: List[HlsManifestCreateOrUpdateParameters]


class FieldListOfIngestEndpoint(RootModel[List[IngestEndpoint]]):
    root: List[IngestEndpoint]


class FieldListOfString(RootModel[List[FieldString]]):
    root: List[FieldString]


class FieldMapOfString(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class ConfigureLogsRequest(BaseModel):
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )


class CreateChannelRequest(BaseModel):
    Description: Optional[FieldString] = None
    Id: FieldString
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateHarvestJobRequest(BaseModel):
    EndTime: FieldString
    Id: FieldString
    OriginEndpointId: FieldString
    S3Destination_1: S3Destination = Field(..., alias='S3Destination')
    StartTime: FieldString


class CreateHarvestJobResponse(BaseModel):
    Arn: Optional[FieldString] = None
    ChannelId: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    EndTime: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    OriginEndpointId: Optional[FieldString] = None
    S3Destination_1: Optional[S3Destination] = Field(None, alias='S3Destination')
    StartTime: Optional[FieldString] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class DescribeHarvestJobResponse(BaseModel):
    Arn: Optional[FieldString] = None
    ChannelId: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    EndTime: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    OriginEndpointId: Optional[FieldString] = None
    S3Destination_1: Optional[S3Destination] = Field(None, alias='S3Destination')
    StartTime: Optional[FieldString] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class HarvestJob(BaseModel):
    Arn: Optional[FieldString] = None
    ChannelId: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    EndTime: Optional[FieldString] = None
    Id: Optional[FieldString] = None
    OriginEndpointId: Optional[FieldString] = None
    S3Destination_1: Optional[S3Destination] = Field(None, alias='S3Destination')
    StartTime: Optional[FieldString] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class HlsIngest(BaseModel):
    IngestEndpoints: Optional[FieldListOfIngestEndpoint] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class RotateChannelCredentialsResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class RotateIngestEndpointCredentialsResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class SpekeKeyProvider(BaseModel):
    CertificateArn: Optional[FieldString] = None
    EncryptionContractConfiguration_1: Optional[EncryptionContractConfiguration] = (
        Field(None, alias='EncryptionContractConfiguration')
    )
    ResourceId: FieldString
    RoleArn: FieldString
    SystemIds: FieldListOfString
    Url: FieldString


class TagResourceRequest(BaseModel):
    Tags: FieldMapOfString


class UpdateChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class FieldListOfHarvestJob(RootModel[List[HarvestJob]]):
    root: List[HarvestJob]


class Channel(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CmafEncryption(BaseModel):
    ConstantInitializationVector: Optional[FieldString] = None
    EncryptionMethod: Optional[CmafEncryptionMethod] = None
    KeyRotationIntervalSeconds: Optional[FieldInteger] = None
    SpekeKeyProvider_1: SpekeKeyProvider = Field(..., alias='SpekeKeyProvider')


class CmafPackage(BaseModel):
    Encryption: Optional[CmafEncryption] = None
    HlsManifests: Optional[FieldListOfHlsManifest] = None
    SegmentDurationSeconds: Optional[FieldInteger] = None
    SegmentPrefix: Optional[FieldString] = None
    StreamSelection_1: Optional[StreamSelection] = Field(None, alias='StreamSelection')


class CmafPackageCreateOrUpdateParameters(BaseModel):
    Encryption: Optional[CmafEncryption] = None
    HlsManifests: Optional[FieldListOfHlsManifestCreateOrUpdateParameters] = None
    SegmentDurationSeconds: Optional[FieldInteger] = None
    SegmentPrefix: Optional[FieldString] = None
    StreamSelection_1: Optional[StreamSelection] = Field(None, alias='StreamSelection')


class ConfigureLogsResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DashEncryption(BaseModel):
    KeyRotationIntervalSeconds: Optional[FieldInteger] = None
    SpekeKeyProvider_1: SpekeKeyProvider = Field(..., alias='SpekeKeyProvider')


class DashPackage(BaseModel):
    AdTriggers_1: Optional[AdTriggers] = Field(None, alias='AdTriggers')
    AdsOnDeliveryRestrictions_1: Optional[AdsOnDeliveryRestrictions] = Field(
        None, alias='AdsOnDeliveryRestrictions'
    )
    Encryption: Optional[DashEncryption] = None
    IncludeIframeOnlyStream: Optional[FieldBoolean] = None
    ManifestLayout_1: Optional[ManifestLayout] = Field(None, alias='ManifestLayout')
    ManifestWindowSeconds: Optional[FieldInteger] = None
    MinBufferTimeSeconds: Optional[FieldInteger] = None
    MinUpdatePeriodSeconds: Optional[FieldInteger] = None
    PeriodTriggers: Optional[FieldListOfPeriodTriggersElement] = None
    Profile_1: Optional[Profile] = Field(None, alias='Profile')
    SegmentDurationSeconds: Optional[FieldInteger] = None
    SegmentTemplateFormat_1: Optional[SegmentTemplateFormat] = Field(
        None, alias='SegmentTemplateFormat'
    )
    StreamSelection_1: Optional[StreamSelection] = Field(None, alias='StreamSelection')
    SuggestedPresentationDelaySeconds: Optional[FieldInteger] = None
    UtcTiming_1: Optional[UtcTiming] = Field(None, alias='UtcTiming')
    UtcTimingUri: Optional[FieldString] = None


class DescribeChannelResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreatedAt: Optional[FieldString] = None
    Description: Optional[FieldString] = None
    EgressAccessLogs_1: Optional[EgressAccessLogs] = Field(
        None, alias='EgressAccessLogs'
    )
    HlsIngest_1: Optional[HlsIngest] = Field(None, alias='HlsIngest')
    Id: Optional[FieldString] = None
    IngressAccessLogs_1: Optional[IngressAccessLogs] = Field(
        None, alias='IngressAccessLogs'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class HlsEncryption(BaseModel):
    ConstantInitializationVector: Optional[FieldString] = None
    EncryptionMethod_1: Optional[EncryptionMethod] = Field(
        None, alias='EncryptionMethod'
    )
    KeyRotationIntervalSeconds: Optional[FieldInteger] = None
    RepeatExtXKey: Optional[FieldBoolean] = None
    SpekeKeyProvider_1: SpekeKeyProvider = Field(..., alias='SpekeKeyProvider')


class HlsPackage(BaseModel):
    AdMarkers_1: Optional[AdMarkers] = Field(None, alias='AdMarkers')
    AdTriggers_1: Optional[AdTriggers] = Field(None, alias='AdTriggers')
    AdsOnDeliveryRestrictions_1: Optional[AdsOnDeliveryRestrictions] = Field(
        None, alias='AdsOnDeliveryRestrictions'
    )
    Encryption: Optional[HlsEncryption] = None
    IncludeDvbSubtitles: Optional[FieldBoolean] = None
    IncludeIframeOnlyStream: Optional[FieldBoolean] = None
    PlaylistType_1: Optional[PlaylistType] = Field(None, alias='PlaylistType')
    PlaylistWindowSeconds: Optional[FieldInteger] = None
    ProgramDateTimeIntervalSeconds: Optional[FieldInteger] = None
    SegmentDurationSeconds: Optional[FieldInteger] = None
    StreamSelection_1: Optional[StreamSelection] = Field(None, alias='StreamSelection')
    UseAudioRenditionGroup: Optional[FieldBoolean] = None


class ListHarvestJobsResponse(BaseModel):
    HarvestJobs: Optional[FieldListOfHarvestJob] = None
    NextToken: Optional[FieldString] = None


class MssEncryption(BaseModel):
    SpekeKeyProvider_1: SpekeKeyProvider = Field(..., alias='SpekeKeyProvider')


class MssPackage(BaseModel):
    Encryption: Optional[MssEncryption] = None
    ManifestWindowSeconds: Optional[FieldInteger] = None
    SegmentDurationSeconds: Optional[FieldInteger] = None
    StreamSelection_1: Optional[StreamSelection] = Field(None, alias='StreamSelection')


class OriginEndpoint(BaseModel):
    Arn: Optional[FieldString] = None
    Authorization_1: Optional[Authorization] = Field(None, alias='Authorization')
    ChannelId: Optional[FieldString] = None
    CmafPackage_1: Optional[CmafPackage] = Field(None, alias='CmafPackage')
    CreatedAt: Optional[FieldString] = None
    DashPackage_1: Optional[DashPackage] = Field(None, alias='DashPackage')
    Description: Optional[FieldString] = None
    HlsPackage_1: Optional[HlsPackage] = Field(None, alias='HlsPackage')
    Id: Optional[FieldString] = None
    ManifestName: Optional[FieldString] = None
    MssPackage_1: Optional[MssPackage] = Field(None, alias='MssPackage')
    Origination_1: Optional[Origination] = Field(None, alias='Origination')
    StartoverWindowSeconds: Optional[FieldInteger] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TimeDelaySeconds: Optional[FieldInteger] = None
    Url: Optional[FieldString] = None
    Whitelist: Optional[FieldListOfString] = None


class UpdateOriginEndpointRequest(BaseModel):
    Authorization_1: Optional[Authorization] = Field(None, alias='Authorization')
    CmafPackage: Optional[CmafPackageCreateOrUpdateParameters] = None
    DashPackage_1: Optional[DashPackage] = Field(None, alias='DashPackage')
    Description: Optional[FieldString] = None
    HlsPackage_1: Optional[HlsPackage] = Field(None, alias='HlsPackage')
    ManifestName: Optional[FieldString] = None
    MssPackage_1: Optional[MssPackage] = Field(None, alias='MssPackage')
    Origination_1: Optional[Origination] = Field(None, alias='Origination')
    StartoverWindowSeconds: Optional[FieldInteger] = None
    TimeDelaySeconds: Optional[FieldInteger] = None
    Whitelist: Optional[FieldListOfString] = None


class UpdateOriginEndpointResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Authorization_1: Optional[Authorization] = Field(None, alias='Authorization')
    ChannelId: Optional[FieldString] = None
    CmafPackage_1: Optional[CmafPackage] = Field(None, alias='CmafPackage')
    CreatedAt: Optional[FieldString] = None
    DashPackage_1: Optional[DashPackage] = Field(None, alias='DashPackage')
    Description: Optional[FieldString] = None
    HlsPackage_1: Optional[HlsPackage] = Field(None, alias='HlsPackage')
    Id: Optional[FieldString] = None
    ManifestName: Optional[FieldString] = None
    MssPackage_1: Optional[MssPackage] = Field(None, alias='MssPackage')
    Origination_1: Optional[Origination] = Field(None, alias='Origination')
    StartoverWindowSeconds: Optional[FieldInteger] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TimeDelaySeconds: Optional[FieldInteger] = None
    Url: Optional[FieldString] = None
    Whitelist: Optional[FieldListOfString] = None


class FieldListOfChannel(RootModel[List[Channel]]):
    root: List[Channel]


class FieldListOfOriginEndpoint(RootModel[List[OriginEndpoint]]):
    root: List[OriginEndpoint]


class CmafPackage1(BaseModel):
    Encryption: Optional[CmafEncryption] = None
    HlsManifests: Optional[FieldListOfHlsManifestCreateOrUpdateParameters] = None
    SegmentDurationSeconds: Optional[FieldInteger] = None
    SegmentPrefix: Optional[FieldString] = None
    StreamSelection_1: Optional[StreamSelection] = Field(None, alias='StreamSelection')


class OriginEndpointsPostRequest(BaseModel):
    authorization: Optional[Authorization1] = Field(
        None, description='CDN Authorization credentials'
    )
    channelId: str = Field(
        ...,
        description='The ID of the Channel that the OriginEndpoint will be associated with.\nThis cannot be changed after the OriginEndpoint is created.\n',
    )
    cmafPackage: Optional[CmafPackage1] = Field(
        None,
        description='A Common Media Application Format (CMAF) packaging configuration.',
    )
    dashPackage: Optional[DashPackage] = Field(
        None,
        description='A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.',
    )
    description: Optional[str] = Field(
        None, description='A short text description of the OriginEndpoint.'
    )
    hlsPackage: Optional[HlsPackage] = Field(
        None, description='An HTTP Live Streaming (HLS) packaging configuration.'
    )
    id: str = Field(
        ...,
        description='The ID of the OriginEndpoint.  The ID must be unique within the region\nand it cannot be changed after the OriginEndpoint is created.\n',
    )
    manifestName: Optional[str] = Field(
        None,
        description='A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").',
    )
    mssPackage: Optional[MssPackage] = Field(
        None, description='A Microsoft Smooth Streaming (MSS) packaging configuration.'
    )
    origination: Optional[Origination] = Field(
        None,
        description='Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint\nmay by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be\nrequested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination\n',
    )
    startoverWindowSeconds: Optional[int] = Field(
        None,
        description='Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n',
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='A collection of tags associated with a resource'
    )
    timeDelaySeconds: Optional[int] = Field(
        None,
        description='Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n',
    )
    whitelist: Optional[List[FieldString]] = Field(
        None,
        description='A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.',
    )


class OriginEndpointsIdPutRequest(BaseModel):
    authorization: Optional[Authorization1] = Field(
        None, description='CDN Authorization credentials'
    )
    cmafPackage: Optional[CmafPackage1] = Field(
        None,
        description='A Common Media Application Format (CMAF) packaging configuration.',
    )
    dashPackage: Optional[DashPackage] = Field(
        None,
        description='A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.',
    )
    description: Optional[str] = Field(
        None, description='A short text description of the OriginEndpoint.'
    )
    hlsPackage: Optional[HlsPackage] = Field(
        None, description='An HTTP Live Streaming (HLS) packaging configuration.'
    )
    manifestName: Optional[str] = Field(
        None,
        description='A short string that will be appended to the end of the Endpoint URL.',
    )
    mssPackage: Optional[MssPackage] = Field(
        None, description='A Microsoft Smooth Streaming (MSS) packaging configuration.'
    )
    origination: Optional[Origination] = Field(
        None,
        description='Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint\nmay by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be\nrequested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination\n',
    )
    startoverWindowSeconds: Optional[int] = Field(
        None,
        description='Maximum duration (in seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n',
    )
    timeDelaySeconds: Optional[int] = Field(
        None,
        description='Amount of delay (in seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n',
    )
    whitelist: Optional[List[FieldString]] = Field(
        None,
        description='A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.',
    )


class CreateOriginEndpointRequest(BaseModel):
    Authorization_1: Optional[Authorization] = Field(None, alias='Authorization')
    ChannelId: FieldString
    CmafPackage: Optional[CmafPackageCreateOrUpdateParameters] = None
    DashPackage_1: Optional[DashPackage] = Field(None, alias='DashPackage')
    Description: Optional[FieldString] = None
    HlsPackage_1: Optional[HlsPackage] = Field(None, alias='HlsPackage')
    Id: FieldString
    ManifestName: Optional[FieldString] = None
    MssPackage_1: Optional[MssPackage] = Field(None, alias='MssPackage')
    Origination_1: Optional[Origination] = Field(None, alias='Origination')
    StartoverWindowSeconds: Optional[FieldInteger] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TimeDelaySeconds: Optional[FieldInteger] = None
    Whitelist: Optional[FieldListOfString] = None


class CreateOriginEndpointResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Authorization_1: Optional[Authorization] = Field(None, alias='Authorization')
    ChannelId: Optional[FieldString] = None
    CmafPackage_1: Optional[CmafPackage] = Field(None, alias='CmafPackage')
    CreatedAt: Optional[FieldString] = None
    DashPackage_1: Optional[DashPackage] = Field(None, alias='DashPackage')
    Description: Optional[FieldString] = None
    HlsPackage_1: Optional[HlsPackage] = Field(None, alias='HlsPackage')
    Id: Optional[FieldString] = None
    ManifestName: Optional[FieldString] = None
    MssPackage_1: Optional[MssPackage] = Field(None, alias='MssPackage')
    Origination_1: Optional[Origination] = Field(None, alias='Origination')
    StartoverWindowSeconds: Optional[FieldInteger] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TimeDelaySeconds: Optional[FieldInteger] = None
    Url: Optional[FieldString] = None
    Whitelist: Optional[FieldListOfString] = None


class DescribeOriginEndpointResponse(BaseModel):
    Arn: Optional[FieldString] = None
    Authorization_1: Optional[Authorization] = Field(None, alias='Authorization')
    ChannelId: Optional[FieldString] = None
    CmafPackage_1: Optional[CmafPackage] = Field(None, alias='CmafPackage')
    CreatedAt: Optional[FieldString] = None
    DashPackage_1: Optional[DashPackage] = Field(None, alias='DashPackage')
    Description: Optional[FieldString] = None
    HlsPackage_1: Optional[HlsPackage] = Field(None, alias='HlsPackage')
    Id: Optional[FieldString] = None
    ManifestName: Optional[FieldString] = None
    MssPackage_1: Optional[MssPackage] = Field(None, alias='MssPackage')
    Origination_1: Optional[Origination] = Field(None, alias='Origination')
    StartoverWindowSeconds: Optional[FieldInteger] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TimeDelaySeconds: Optional[FieldInteger] = None
    Url: Optional[FieldString] = None
    Whitelist: Optional[FieldListOfString] = None


class ListChannelsResponse(BaseModel):
    Channels: Optional[FieldListOfChannel] = None
    NextToken: Optional[FieldString] = None


class ListOriginEndpointsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    OriginEndpoints: Optional[FieldListOfOriginEndpoint] = None
